*** The Dim variable has been changed to 19 for the matmults because you told us to. ***

Title:  Writeup for Project 3, Summer 2014
Date:  7/16/2014
Group Num 1 : Name            Email            Student ID
              Philip Lee      leephili@usc.edu 3759772007
              Byron Choy	byroncho@usc.edu 7784820771
              
I. Requirements:
Implement the management for TLB by handling PageFaultExceptions.
Handle the TLB when context switching.
Implement virtual memory by use of a swap file.
Add function to choose between random and fifo for page eviction method.
Implement inverted page table to allow this to work.


II. Assumptions:
Since this is built on top of assignment 2, assume the previous assignment is done correctly.
Makefile has been modified to build any additional files correctly. (Own tests and extra code files.)
Assumes the names of locks, CVs and MVs have no spaces.


III. Design:
The TLB has to be populated whenever there is a page fault exception thrown.
This is done through the exception handler with another else if statement added to it.
The newest page is added to the TLB through fifo page eviction method by keeping a counter modulated by the TLBSize.
Update the tlb with the information with the IPT entry using the physical page found matching to the virtual page number calculated.

The TLB has to be invalidated when there is a context switch.
This is done through modifying the SaveUserState() method in thread.cc.
It disables interrupts, as usual when handling the TLB, and marks each page invalid.

Implementing the inverted page table to keep track of physical pages of memory was done next.
We created an array (called ipt) of NumPhysPages size (32 in this case) to keep track of each physical page.
The fields for each IPTEntry included the ones provided in the TranslationEntry struct as well as an additional field for recording AddressSpace (as).

The IPT was populated whenever a physical page was changed.
This was mostly in the PageFaultException handler.
However, additional code was added into the AddressSpace functions whenever a physical page was not needed anymore as a result of an Exit syscall.
Here we need to invalidate any tlb entries that refer to the pages being cleared.
The ipt valid bits for the physical pages need to be flagged false.
Also remove the physical page from fifo queue if needed.

As a result of limited physical pages, nothing is preloaded into memory anymore.
A function called handleIPTMiss was created to handle PageFaultExceptions as a result.
Here we find a physical page of memory to use by using Find() on the memory bit map and load the corresponding code or data into it.
The PageTable and IPT are updated with this new information, as is the old page's information.
The page is filled with either executable code, swap data, or just nothing if not used yet.
In the case of no more free physical pages, which will occur as soon as 32 physical pages are used up, nachos will call handleMemoryFull() to determine a page after getting -1 from Find() from the memory bit map.
Here an algorithm is used to determine which physical page to evict for use.
The two algorithms implemented are FIFO and random page eviction.
Random just randomly selects a page to evict, as long as the page isn't already being evicted by another memory full event.
Use the use field in the IPTEntry to keep track of if another rand is evicting the same page.
The fifo algorithm creates a list that holds all the physical pages in use.
When the fifo portion is run, the first page in the list is used and added to the end at the end of PageFaultExeption handler.
Invalidate any tlb entries that refer to this physical page and copy dirty bits if needed.
The page table, accessed through the ipt addrspace pointer, should also be updated with diskLocation and offset if the page evicted is dirty.

Also, when a program exits, the physical page is freed, so the corresponding page is removed from the fifo queue.
This should occur in the exit syscall or a function called by it.







IV. Implementation:
+ Files Modified
threads/system.h
extern int currentTLB; //Int to keep track of which TLB entry to evict for fifo
extern IPTEntry *ipt; //Inverted page table array
extern Lock* IPTLock; //Lock to stop IPT race conditions
extern int evictMethod; //0 - RAND, 1 - FIFO, set by flags when running nachos
extern OpenFile* swapFile; //Swap file used for virtual memory
extern BitMap* swapBitMap; //BitMap to keep track of open swap locations in file
extern Lock* swapLock; //Lock to stop swap file race conditions
extern std::list<int> *fifoQueue; //List used for fifo queue
extern Lock* fifoLock; //Lock used for fifo queue

+ Files added
userprog/IPTEntry.h
class IPTEntry { //The modified TranslationEntry used for the inverted page table
  public:
    int virtualPage;    // The page number in virtual memory.
    int physicalPage;   // The page number in real memory (relative to the
                  //  start of "mainMemory"
    bool valid;         // If this bit is set, the translation is ignored.
                  // (In other words, the entry hasn't been initialized.)
    bool readOnly;      // If this bit is set, the user program is not allowed
                  // to modify the contents of the page.
    bool use;           // This bit is set by the hardware every time the
                  // page is referenced or modified.
    bool dirty;         // This bit is set by the hardware every time the
                  // page is modified.
    AddrSpace* as; //To record address space for future comparison and access
    
};

+ Data Structures added, and the file they were added to.
userprog/addrspace.h
class PageTableEntry { //Modified TranslationEntry used for PageTable
  public:
    int virtualPage;    // The page number in virtual memory.
    int physicalPage;   // The page number in real memory (relative to the
            //  start of "mainMemory"
    bool valid;         // If this bit is set, the translation is ignored.
            // (In other words, the entry hasn't been initialized.)
    bool readOnly;  // If this bit is set, the user program is not allowed
            // to modify the contents of the page.
    bool use;           // This bit is set by the hardware every time the
            // page is referenced or modified.
    bool dirty;         // This bit is set by the hardware every time the
            // page is modified.
    int diskLocation; //0 - exec, 1 - swap, 2 - neither
    int offset; //Byte offset of page in file (whether in swap or exec)
};

threads/system.h
struct KernelMV{ //Kernel version of a MV
    char* name; //name for comparison
    int* values; //array of int values
    int maxValue; //size of the array
    int requestThreads; //# of threads that requested its creation - when = 0, Thread
                    // is destroyed
    AddrSpace* as; //address space of MV
    bool isToBeDestroyed; //boolean signaling destruction
};
struct ServerLock{ //server equivalent of a lock in order to avoid sleeping
    int state; //0 = available, 1 = busy
    int owner; //machine ID of the owner of the lock
    List* queue; //wait queue
};
struct ServerCV{ //server equivalent of a CV in order to avoid waiting
    int lock; //ServerLock table index
    List* queue; //wait queue
};

+ Data Structures modified, and the file they were added to.

+ Functions added and in which file.
userprog/exception.cc
int handleMemoryFull(){ 
    //Evict a page based on flag evictMethod 0 - RAND, 1 - fifo
    //Use fifo or random to get a page
    //If using rand, make sure that another thread isn't evicting the same page by using use flag in ipt entry
    //If using fifo, pop the front of the queue for use
    //Make sure to use a lock to ensure fifo queue is synchronized
    //Update tlb by invalidating matching entries
    //If page is dirty according to ipt, write to swap file. Set diskLocation fields and offset to pageTable through ipt addrspace
}
int handleIPTMiss(int vpn){
    //Handle inverted page table missed, called from PFE handler
    //Find open page from memory bit map
    //If unable to find an open page, call handleMemoryFull() to get a physical page to use
    //If using fifo queue for eviction, readd the ppn returned to end of queue
    //Update the page table with physical page mapping and valid
    //Update ipt with ppn, vpn, valid, dirty, and addrspace
    //Read in executable if necessary, else from swap, or just nothing
    //Return ppn with page
}

+ Functions modified and in which file.
threads/system.cc
void Initialize(int argc, char **argv) {
    //Initialize all of the variables created in system.h
}

userprog/addrspace.cc
AddrSpace::AddrSpace(OpenFile *executable) : fileTable(MaxOpenFiles) {
    //The constructor of the addrspace was modified to now preload the exec into memory
    //Comment out all IPT stuff in constructor from project 2
    //Comment out the physical page assignment to the page table since no more preloading or large memory
    //Comment out executable read in

}
AddrSpace::Empty8Pages(int startPage){ AND AdrrSpace::EmptyPages(){
    //Added code to evict corresponding pages from TLB and IPT when deleting pages not used by exiting threads/processes
    //Check the page table entry to be valid first, then check the ipt addressspace matches, use is false, valid is true, and virtual page matches the startPage and on.
    //Clear the physical page to memoryBitMap
    //Invalidate any TLB entries that refer to this physical page
    //If using FIFO for page eviction, remove physical page from queue if there
}

userprog/exception.cc
void ExceptionHandler(ExceptionType which) {
    //Added code to handle PageFaultException to fault switch
    //Calculate the VPN from BadVAddrReg divided by PageSize
    //Check for the VPN in the inverted page table
    //If not found, go to handleIPTMiss(vpn)
    //Update TLB with the new entry, remember to disable interrupts around this part
    //If using rand page evict, remember to update ipt with use = false for that ppn
}


all syscalls relating to Locks and CVs were modified to instead do the following: 
    ○ Determine syscall type
    ○ Get the input data
    ○ Only validate char arrays
    ○ Create a request message; send to server
    ○ Wait for reply message
    ○ Parse reply msg
        § If needed, return value to user program


threads/thread.cc
Thread::SaveUserState(){
	//Make sure to disable/enable interrupts around tlb code
	//Loop through the TLB
	//If tlb entry is valid and dirty, then pass dirty bit to the IPT
	//Invalidate the tlb entry by marking valid false
}



V. Testing:  (For each test case, you must show)
+ How to test
Compile with gmake as usual in network folder.
Tests for part 1/2:
Running nachos [-PRAND OR -PFIFO] -x [../test/matmult OR ../test/matmult_fork OR ../test/matmult_exec OR ../test/matmult_combo]

Test for part 3:
Have 4 instances of nachos open, and run in the following order
nachos -m 0 -server
nachos -m 1 -x ../test/t1_1
nachos -m 1 -x ../test/t1_2
nachos -m 1 -x ../test/t1_3


+ Test Output
Tests for part 1/2:
For the matmult test, the output should be Exit: 6156 to show the test exited correctly.
The matmult_fork, matmult_exec, and matmult_combo test should have a combination of one Exit: 0 and two Exit: 6156 outputs.

Test for part 3:
The first and second test should complete, and the third one should not be able to release the lock. The server will run indefinitely.

VI. Discussion:
+ Experiment expectation.  (What you hope will happen.)
Tests for part 1/2:
The tests should end with exit calls with returned value of 6156 to show the matrices multiplication ended with values of 6156.
The exit 0 should be when main function exits.

Test for part 3:
The test should end with exit calls 

+ Experiment result.  (What actually happens.)
Tests for part 1/2:
nachos -x ../test/matmult_exec
Exit: 0
Exit: 6156
Exit: 6156
No threads ready or runnable, and no pending interrupts.
Assuming the program completed.
Machine halting!

nachos -x ../test/matmult_fork
Exit: 0
Exit: 6156
Exit: 6156
No threads ready or runnable, and no pending interrupts.
Assuming the program completed.
Machine halting!

nachos -x ../test/matmult_combo
Exit: 0
Exit: 6156
Exit: 6156
No threads ready or runnable, and no pending interrupts.
Assuming the program completed.
Machine halting!


+ Explanation
Tests for part 1/2:
Each of these tests succeeded as the return value show the memory pages were correctly handled.
If the return value of the test was not 6156, then I would know the memory pages were scrambled at some point and incorrect pages were being accessed. By mixing exec and fork, we know that page handling is not mixing the pages between threads in same process and between two processes as well.


VII. Miscellaneous:

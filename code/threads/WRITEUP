Title:  Writeup for Project 1, Summer 2014
Date:  6/7/2014
Group Num 1 : Name            Email            Student ID
              Philip Lee      leephili@usc.edu 3759772007
              Byron Choy	  byroncho@usc.edu 7784820771

I. Requirements:
Part 1:
Implement the synchronization classes of Lock and Condition variables. 
This implementation must address issues that violate mutual exclusion.
Any thread that does something illegal should not terminate, but output an error message.

Part 2:
Create a hospital simulation. Contains at least 20 patients, 2-5 receptionists, 2-5 doorboys, 2-5 doctors, 2-5 cashiers, 2-5 pharmacy clerks, and 1 manager. 
This part cannot use semaphores for synchronizations though.

II. Assumptions:
Assuming that the base Nachos code is working as intended.
Part 2 assumes that part 1 was done correctly.
User input is as allowed by assignment requirements and instructions.
For testing purposes, assumes that testing how the line system between Patient and Receptionist is all that is necessary since the code for that interaction and the interactions for Cashier and PharmacyClerk are identical. 
Assumes that the Doctor going on break once is sufficient to test all three of the doctor break-related tests. 

III. Design:
The first part is heavily based on what Professor Crowley discussed in class lectures. 
The code is basically an adapted version of what was provided for our use.
The code includes safety features to ensure the correct procedures are occurring when calls to locks and condition variables happen.

The hospital design was heavily based on the use of locks and conditions in order to keep the synchronization between the various members.
The hospital management simulation code is all located under threadtest.cc.
Condition variables are used to simulate the interactions between the various members.
Locks are used to ensure no race conditions occur in the code.
Patients' code basically shows the steps a patient goes through when visiting the hospital.
The patient only goes through the steps once and then dies (aka leaving the hospital).
The other members of the hospital contain an endless while loop to allow repeated cycles through the steps.
We designed the manager to keep track of the number of patients going through, so it can end the simulation when all patients are done.

IV. Implementation:

+ Files Modified
synch.h, synch.cc, threadtest.cc
+ Files added
None
+ Data Structures added, and the file they were added to.
None
+ Data Structures modified, and the file they were added to.
	class Lock                -- in file synch.cc/synch.h
	{
		Added isFree boolean, lockOwner thread, and waitlist queue as private variables in synch.h. Filled in Lock constructor and destructor, as well as Acquire and Release functions in synch.cc
	}
    class Condition           -- in file synch.cc/synch.h
    {
    	Added waitlist queue and waiting Lock as private variables. Filled in Condition constructor and destructor, as well as the Wait, Signal, and Broadcast functions.
    }

+ Functions added and in which file.
	Added Patient, Doctor, Receptionist, Door_Boy, Doctor, Cashier, Clerk, Manager, Setup, and Problem2 functions were added to the threadtest.cc file. 

+ Functions modified and in which file.
	None

V. Testing:  (For each test case, you must show)
+ How to test
- How to run the test cases, the commands, the arguments and so on.

+ Test Output
- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output.

VI. Discussion:
+ Experiment expectation.  (What you hope will happen.)

+ Experiment result.  (What actually happens.)

+ Explanation
- Explain your experiment result.

VII. Miscellaneous:
The hospital manager outputs the total consultation fee and total medicine fees. These messages can obscure the more important messages.
The manager can be temporarily muted by commenting out the section starting from around line 1173.

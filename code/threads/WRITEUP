Title:  Writeup for Project 1, Summer 2014
Date:  6/7/2014
Group Num 1 : Name            Email            Student ID
              Philip Lee      leephili@usc.edu 3759772007
              Byron Choy	  byroncho@usc.edu 7784820771

I. Requirements:
Part 1:
Implement the synchronization classes of Lock and Condition variables. 
This implementation must address issues that violate mutual exclusion.
Any thread that does something illegal should not terminate, but output an error message.

Part 2:
Create a hospital simulation. Contains at least 20 patients, 2-5 receptionists, 2-5 doorboys, 2-5 doctors, 2-5 cashiers, 2-5 pharmacy clerks, and 1 manager. 
This part cannot use semaphores for synchronizations though.

II. Assumptions:
Assuming that the base Nachos code is working as intended.
Part 2 assumes that part 1 was done correctly.
User input is as allowed by assignment requirements and instructions.
Assumes that the Doctor going on break once is sufficient to test all three of the doctor break-related tests. 
Assumes that a thread on break is equivalent to not existing, therefore making it easier to test what happens when all threads of a certain type are on break. 
Assumes the line algorithm for Receptionist, Cashier, and Pharmacy Clerk are identical.

III. Design:
The first part is heavily based on what Professor Crowley discussed in class lectures. 
The code is basically an adapted version of what was provided for our use.
The code includes safety features to ensure the correct procedures are occurring when calls to locks and condition variables happen.
When a violation occurs, the code outputs a warning and ignores the offending call on the lock/condition variable.

The hospital design was heavily based on the use of locks and conditions in order to keep the synchronization between the various members.
The hospital management simulation code is all located under threadtest.cc.
Condition variables are used to simulate the interactions between the various members.
Locks are used to ensure no race conditions occur in the code.
Patients' code basically shows the steps a patient goes through when visiting the hospital.
The patient only goes through the steps once and then dies (aka leaving the hospital).
The other members of the hospital contain an endless while loop to allow repeated cycles through the steps.
We designed the manager to keep track of the number of patients going through, so it can end the simulation when all patients are done.

The interactions between the people at the hospital follow this basic design:
(job)LineLock is acquired for lining up and waiting on the line condition variable.
To ensure the order of the communication, locks further on are acquired before releasing the previous one to ensure the wait comes before the signal.
Communication is handled by acquiring the lock associated with the resource and then placing the data into an array assigned for this information.
A condition variable is assigned to almost every worker at the hospital used to wait/signal to simulate the talk and response between the patient and the worker.

IV. Implementation:

+ Files Modified
synch.h, synch.cc, threadtest.cc
+ Files added
None
+ Data Structures added, and the file they were added to.
None
+ Data Structures modified, and the file they were added to.
	class Lock                -- in file synch.cc/synch.h
	{
		Added isFree boolean, lockOwner thread, and waitlist queue as private variables in synch.h. Filled in Lock constructor and destructor, as well as Acquire and Release functions in synch.cc
	}
    class Condition           -- in file synch.cc/synch.h
    {
    	Added waitlist queue and waiting Lock as private variables. Filled in Condition constructor and destructor, as well as the Wait, Signal, and Broadcast functions.
    }

+ Functions added and in which file.
	Added Patient, Doctor, Receptionist, Door_Boy, Doctor, Cashier, Clerk, Manager, Setup, and Problem2 functions were added to the threadtest.cc file. 

+ Functions modified and in which file.
	None

V. Testing:  (For each test case, you must show)
+ How to test
- How to run the test cases, the commands, the arguments and so on.

+ Test Output
- Describe the testing output. You don't have to dump all the output info. Just make sure your description can exactly reflect your output.

VI. Discussion:
+ Experiment expectation.  (What you hope will happen.)
In the first test, the patient will wait until the doorboy and the doctor signal to the patient, then get examined and leave.
In the second test, the doorBoys will all go on break and the patients will be left with nothing to do after meeting the receptionists, therefore ending the simulation.



+ Experiment result.  (What actually happens.)

+ Explanation
- Explain your experiment result.

VII. Miscellaneous:
The hospital manager outputs the total consultation fee and total medicine fees. These messages can obscure the more important messages.
The manager can be temporarily muted by commenting out the section starting from around line 1173.



V. Testing:  (For each test case, you must show)
+ How to test
Call nachos with -T in order to launch the test suite provided to test part 1.

+ Test Output
Starting Test 1.
t1_t1: Acquired Lock t1_l1, waiting for t3
t1_t2: trying to acquire lock t1_l1
t1_t3: Trying to release Lock t1_l1
Error: Only t1_t1, the owner of t1_l1, can release the lock.
t1_t3: Trying to release Lock t1_l1
Error: Only t1_t1, the owner of t1_l1, can release the lock.
t1_t3: Trying to release Lock t1_l1
Error: Only t1_t1, the owner of t1_l1, can release the lock.
t1_t1: working in CS
t1_t1: Releasing Lock t1_l1
t1_t2: Acquired Lock t1_l1, working in CS
t1_t2: Releasing Lock t1_l1

Starting Test 2.  Note that it is an error if thread t2_t2
completes
t2_t1: Lock t2_l1 acquired, signalling t2_c1
t2_t1: Releasing Lock t2_l1
t2_t2: Lock t2_l1 acquired, waiting on t2_c1

Starting Test 3
t3_waiter0: Lock t3_l1 acquired, waiting on t3_c1
t3_waiter1: Lock t3_l1 acquired, waiting on t3_c1
t3_waiter2: Lock t3_l1 acquired, waiting on t3_c1
t3_waiter3: Lock t3_l1 acquired, waiting on t3_c1
t3_waiter4: Lock t3_l1 acquired, waiting on t3_c1
t3_signaller: Lock t3_l1 acquired, signalling t3_c1
t3_signaller: Releasing t3_l1
t3_waiter0: freed from t3_c1

Starting Test 4
t4_waiter0: Lock t4_l1 acquired, waiting on t4_c1
t4_waiter1: Lock t4_l1 acquired, waiting on t4_c1
t4_waiter2: Lock t4_l1 acquired, waiting on t4_c1
t4_waiter3: Lock t4_l1 acquired, waiting on t4_c1
t4_waiter4: Lock t4_l1 acquired, waiting on t4_c1
t4_signaller: Lock t4_l1 acquired, broadcasting t4_c1
t4_signaller: Releasing t4_l1
t4_waiter0: freed from t4_c1
t4_waiter1: freed from t4_c1
t4_waiter2: freed from t4_c1
t4_waiter3: freed from t4_c1
t4_waiter4: freed from t4_c1

Starting Test 5.  Note that it is an error if thread t5_t1
completes
t5_t1: Lock t5_l1 acquired, waiting on t5_c1
t5_t2: Lock t5_l2 acquired, signalling t5_c1
Error: Incorrect lock used.
t5_t2: Releasing Lock t5_l2
t5_t2: Releasing Lock t5_l1

VI. Discussion:
+ Experiment expectation.  (What you hope will happen.)
In part 1:
Test 1 should show how one thread acquires the lock, while 2 other threads try to release it. Instead of releasing, the output shows how the lock just outputs an error message. Then the owner releases it, and the 2nd thread acquires it as usual.
Test 2 shows what happens when a signal occurs before a thread waits on the condition variable. The results should show a signal by the first thread and then the 2nd thread waits. As a result, the 2nd thread should never wake up and continue.
Test 3 shows what happens when multiple threads wait on the same condition variable and a signal is sent. The signal should only awaken the first thread to wait on it. The rest should stay asleep.
Test 4 shows what happens when multiple threads wait on the same condition variable and a broadcast is sent. The broadcast should work up all the threads that wait on it.
Test 5 shows what happens when a condition variable is signaled with a different lock then the one used by the other thread to wait with. The output should show an error message about this and the first thread should not complete.

+ Experiment result.  (What actually happens.)
In part 1:
Test 1: The first thread acquires lock t1_l1. Threads 2 and 3 try to acquire and release the lock t1_l1. Error messages appear for each saying only the owner can acquire the lock. The first thread releases the lock. The 2nd thread then acquires the lock.
Test 2: The first thread acquires lock t2_l1 and signals on t2_c1 with it. Then it releases the lock. Lock t2_l1 is acquired by thread 2, and it waits on t2_c1.
Test 3: Waiters 0-5 acquire the lock t3_l1 and all wait on the CV t3_c1 in sequential order. t3_signaller acquires the lock and signals on t3_c1. The first waiter is freed from t3_c1.
Test 4: Waiters 0-5 acquire the lock t4_l1 and all wait on t4_c1. The signaler acquires the lock and broadcasts onto t4_c1. Each waiter is freed from t4_c1.
Test 5: The first thread waits on CV t5_c1 using lock t5_l1. The second thread acquires t5_l2 and tries to use it to signal the CV. The error message appears saying the wrong lock is used.

+ Explanation
In part 1:
Test 1: This test works because the error messages appeared when the access violation occurred instead of ending the test. The first thread can still release the lock afterwards for it to be acquired by another.
Test 2: This test works because the 2nd thread is shown to not continue when the signal occurs before the wait. The test ends without it waking up.
Test 3: This test works because only the first waiter is freed from the CV instead of any other or all.
Test 4: This test works because every waiter wakes up after a broadcast is called on the CV by the signaler.
Test 5: This test is shown to work because the error messages occur when trying to signal using the wrong lock. The waiting thread is not woken up, which shows the access violation was caught and annulled.
